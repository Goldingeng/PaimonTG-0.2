from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
import lib
import asyncio
import datetime
import aioschedule as schedule
import twist
import traceback
import kettle
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton


TOKEN = "5409304847:AAGtNYiN8p_GtHzvYZLQB6S6oGG2sMAwHv0"
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)


@dp.message_handler(commands=["reg", "—Ä–µ–≥"])
async def reg_handler(message: types.Message):
    try:
        user_id = message.from_user.id
        user_name = message.from_user.full_name
        if await lib.is_user_registered(user_id=user_id):
            text = "–ê –∫—Ç–æ —É –Ω–∞—Å —Ç–∞–∫–æ–π —É–º–Ω—ã–π?\n–ù–µ, –¥—Ä—É–≥. –Ø —Ç–µ–±—è —É–∂–µ –∑–Ω–∞—é)"
        else:
            await lib.login_user(user_id=user_id, user_name=user_name)
            text = "–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è!\n–ù–∞–ø–∏—à–∏ /help –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è"
        await message.reply(text)
    except Exception as error: 
        traceback.print_exc()
        await bot.send_message(chat_id=1167542251, text=f"{error}\nreg_handler")


@dp.message_handler(commands=["acc", "–∞–∫–∫"])
async def acc_handler(message: types.Message):
    try:
        if message.reply_to_message:
            user_id = message.reply_to_message.from_user.id
            if await lib.is_user_registered(user_id=user_id):
                keyboard = types.InlineKeyboardMarkup()
                button1 = types.InlineKeyboardButton(text="ü´ñ", callback_data="kettle")
                keyboard.row(button1)
                button2 = types.InlineKeyboardButton(text="üü™", callback_data="epic")
                button3 = types.InlineKeyboardButton(text="üü®", callback_data="leg")
                keyboard.row(button2, button3)
                button4 = types.InlineKeyboardButton(text="–í–∏–¥", callback_data="view")
                button5 = types.InlineKeyboardButton(text="–ë–∞–Ω–Ω–µ—Ä", callback_data="banner")
                keyboard.row(button4, button5)
                await message.reply(acc_message, parse_mode='HTML', reply_markup=keyboard)
            else:
                await message.reply("–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!")
        else:
            user_id = message.from_user.id
            if await lib.is_user_registered(user_id=user_id):
                acc_message = await lib.acc(user_id)
                keyboard = types.InlineKeyboardMarkup()
                button1 = types.InlineKeyboardButton(text="ü´ñ", callback_data="kettle")
                keyboard.row(button1)
                button2 = types.InlineKeyboardButton(text="üü™", callback_data="epic")
                button3 = types.InlineKeyboardButton(text="üü®", callback_data="leg")
                keyboard.row(button2, button3)
                button4 = types.InlineKeyboardButton(text="–í–∏–¥", callback_data="view")
                button5 = types.InlineKeyboardButton(text="–ë–∞–Ω–Ω–µ—Ä", callback_data="banner")
                keyboard.row(button4, button5)
                await message.reply(acc_message, parse_mode='HTML', reply_markup=keyboard)
            else:
                await reg_handler(message)
                await acc_handler(message)
    except Exception as e:
        traceback.print_exc()
        await bot.send_message(chat_id=1167542251, text=f"Error: {e}")

@dp.callback_query_handler(lambda c: c.data == 'banner')
async def banner_callback_handler(callback_query: types.CallbackQuery):
    try:
        user_id = callback_query.from_user.id
        if await lib.is_user_registered(user_id=user_id):
            await bot.answer_callback_query(callback_query.id)
            message = callback_query.message
            banner_msg = await lib.banner()
            banner_day = message.date.day
            await lib.examination_banner(banner_day = banner_day)
            with open("banner.jpg", "rb") as file:
                keyboard = types.InlineKeyboardMarkup()
                button1 = types.InlineKeyboardButton(text="–ö—Ä—É—Ç–∫–∞", callback_data="twist")
                keyboard.row(button1)
                await bot.send_photo(chat_id=message.chat.id, photo=file, caption=banner_msg, reply_to_message_id=message.message_id, reply_markup=keyboard)
        else:
            await bot.answer_callback_query(callback_query.id, text='–í—ã –¥–æ–ª–∂–Ω—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é!')
    except Exception as e:
        await bot.send_message(chat_id=1167542251, text=f"Error: {e}")


@dp.callback_query_handler(lambda c: c.data == 'view')
async def view_callback_handler(callback_query: types.CallbackQuery):
    try:
        user_id = callback_query.from_user.id
        if await lib.is_user_registered(user_id=user_id):
            await bot.answer_callback_query(callback_query.id)
            message = callback_query.message
            user_id = callback_query.from_user.id
            if await lib.is_user_registered(user_id=user_id):
                await bot.send_message(chat_id=callback_query.message.chat.id, text=await lib.view(user_id = user_id), parse_mode='HTML')
            else:
                await reg_handler(message)
                await view_callback_handler(callback_query)
        else:
            await bot.answer_callback_query(callback_query.id, text='–í—ã –¥–æ–ª–∂–Ω—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é!')
    except Exception as e:
        await bot.send_message(chat_id=1167542251, text=f"Error: {e}")


@dp.callback_query_handler(lambda c: c.data == 'leg')
async def leg_callback_handler(callback_query: types.CallbackQuery):
    try:
        user_id = callback_query.from_user.id
        if await lib.is_user_registered(user_id=user_id):
            await bot.answer_callback_query(callback_query.id)
            message = callback_query.message
            user_id = callback_query.from_user.id
            if await lib.is_user_registered(user_id=user_id):
                epic_message = await lib.leg(user_id)
                await bot.send_message(chat_id=callback_query.message.chat.id,text=epic_message, parse_mode='HTML')
            else:
                await reg_handler(message)
                await leg_handler(message)
        else:
            await bot.answer_callback_query(callback_query.id, text='–í—ã –¥–æ–ª–∂–Ω—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é!')
    except Exception as e:
        await bot.send_message(chat_id=1167542251, text=f"Error: {e}")

@dp.callback_query_handler(lambda c: c.data == 'epic')
async def epic_callback_handler(callback_query: types.CallbackQuery):
    try:
        user_id = callback_query.from_user.id
        if await lib.is_user_registered(user_id=user_id):
            await bot.answer_callback_query(callback_query.id)
            message = callback_query.message
            user_id = callback_query.from_user.id
            if await lib.is_user_registered(user_id=user_id):
                epic_message = await lib.epic(user_id)
                await bot.send_message(chat_id=callback_query.message.chat.id,text=epic_message, parse_mode='HTML')
            else:
                await reg_handler(message)
                await epic_handler(message)
        else:
            await bot.answer_callback_query(callback_query.id, text='–í—ã –¥–æ–ª–∂–Ω—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é!')
    except Exception as e:
        await bot.send_message(chat_id=1167542251, text=f"Error: {e}")


@dp.callback_query_handler(lambda c: c.data == 'kettle')
async def kettle_callback_handler(callback_query: types.CallbackQuery):
    try:
        user_id = callback_query.from_user.id
        if await lib.is_user_registered(user_id=user_id):
            keyboard = types.InlineKeyboardMarkup()
            button1 = types.InlineKeyboardButton(text="üî®", callback_data="price")
            button2 = types.InlineKeyboardButton(text="üôè", callback_data="blessing")
            button3 = types.InlineKeyboardButton(text="üåû", callback_data="daily")
            button4 = types.InlineKeyboardButton(text="üåï", callback_data="moon")
            keyboard.row(button1, button2, button3, button4)
            button5 = types.InlineKeyboardButton(text="üÜô", callback_data="rank")
            keyboard.row(button5)
            await bot.answer_callback_query(callback_query.id)
            await bot.send_message(chat_id=callback_query.message.chat.id, text=await kettle.main(user_id=user_id), parse_mode='HTML', reply_markup=keyboard)
        else:
            await bot.answer_callback_query(callback_query.id, text='–í—ã –¥–æ–ª–∂–Ω—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é!')
    except Exception as e:
        await bot.send_message(chat_id=1167542251, text=f"Error: {e}")


@dp.message_handler(commands=["kettle", "—á–∞–π–Ω–∏–∫"])
async def kettle_handler(message: types.Message):
    try:
        if message.reply_to_message:
            user_id = message.reply_to_message.from_user.id
            mod = 1
        else:
            user_id = message.from_user.id
        if await lib.is_user_registered(user_id=user_id):
            keyboard = types.InlineKeyboardMarkup()
            button1 = types.InlineKeyboardButton(text="üî®", callback_data="price")
            button2 = types.InlineKeyboardButton(text="üôè", callback_data="blessing")
            button3 = types.InlineKeyboardButton(text="üåû", callback_data="daily")
            button4 = types.InlineKeyboardButton(text="üåï", callback_data="moon")
            keyboard.row(button1, button2, button3, button4)
            button5 = types.InlineKeyboardButton(text="üÜô", callback_data="rank")
            keyboard.row(button5)
            await message.reply(text=await kettle.main(user_id=user_id), parse_mode="HTML", reply_markup=keyboard)
        else:
            if mod == 1:
                await message.reply(text='–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è!')
            else:
                await reg_handler(message)
                await kettle_handler(message)
    except Exception as e:
        await bot.send_message(chat_id=1167542251, text=f"Error: {e}")


@dp.callback_query_handler(lambda c: c.data == "moon")
async def moon_callback_handler(callback_query: types.CallbackQuery):
    try:
        user_id = callback_query.from_user.id
        moon = callback_query.from_user.is_premium
        if await lib.is_user_registered(user_id=user_id):
            await bot.answer_callback_query(callback_query.id)
            await bot.send_message(callback_query.message.chat.id, await lib.moon(user_id=user_id, moon=moon))
        else:
            await reg_handler(callback_query.message)
    except Exception as e:
        await bot.send_message(chat_id=1167542251, text=f"Error: {e}")



@dp.callback_query_handler(lambda c: c.data == "rank")
async def rank_handler(callback_query: types.CallbackQuery):
    try:
        user_id = callback_query.from_user.id
        if await lib.is_user_registered(user_id=user_id):
            await bot.answer_callback_query(callback_query.id)
            await bot.send_message(callback_query.message.chat.id, await lib.rank(user_id=user_id))
        else:
            await reg_handler(callback_query.message)
    except Exception as e:
        await bot.send_message(chat_id=1167542251, text=f"Error: {e}")


@dp.callback_query_handler(lambda c: c.data == 'daily')
async def daily_handler(callback_query: types.CallbackQuery):
    try:
        user_id = callback_query.from_user.id
        if await lib.is_user_registered(user_id=user_id):
            await bot.answer_callback_query(callback_query.id)
            await bot.send_message(chat_id=callback_query.message.chat.id, text=await lib.daily(user_id=user_id))
        else:
            await reg_handler(callback_query.message)
            await bot.answer_callback_query(callback_query.message.chat.id, text="–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
    except Exception as e:
        await bot.send_message(chat_id=1167542251, text=f"Error: {e}")

@dp.callback_query_handler(lambda c: c.data == "blessing")
async def blessing_handler(callback_query: types.CallbackQuery):
    try:
        user_id = callback_query.from_user.id
        if await lib.is_user_registered(user_id=user_id):
            await bot.answer_callback_query(callback_query.id)
            await bot.send_message(callback_query.message.chat.id, await lib.blessing(user_id=user_id))
        else:
            await reg_handler(callback_query.message)
    except Exception as e:
        await bot.send_message(chat_id=1167542251, text=f"Error: {e}")

@dp.message_handler(commands=["rank", "—Ä–∞–Ω–≥"])
async def rank_handler(message: types.Message):
    try:
        user_id = message.from_user.id
        if await lib.is_user_registered(user_id=user_id):
            await message.reply(text = await lib.rank(user_id = user_id))
        else:
            await reg_handler(message)
            await rank_handler(message)
    except Exception as e:
        await bot.send_message(chat_id=1167542251, text=f"Error: {e}")

@dp.callback_query_handler(text='price')
async def price_callback_handler(callback_query: types.CallbackQuery):
    try:
        user_id = callback_query.from_user.id
        if await lib.is_user_registered(user_id=user_id):
            price = await lib.price(user_id=user_id)
            await bot.send_message(chat_id=callback_query.message.chat.id, text=price)
    except Exception as e:
        await bot.send_message(chat_id=1167542251, text=f"Error: {e}")


@dp.message_handler(commands=["rank", "—Ä–∞–Ω–≥"])
async def rank_handler(message: types.Message):
    try:
        user_id = message.from_user.id
        if await lib.is_user_registered(user_id=user_id):
            await message.reply(text = await lib.rank(user_id = user_id))
        else:
            await reg_handler(message)
            await rank_handler(message)
    except Exception as e:
        await bot.send_message(chat_id=1167542251, text=f"Error: {e}")



@dp.message_handler(commands=["price", "—Ü–µ–Ω–∞"])
async def price_handler(message: types.Message):
    try:
        user_id = message.from_user.id
        if await lib.is_user_registered(user_id=user_id):
            await message.reply(text = await lib.price(user_id = user_id))
    except Exception as e:
        traceback.print_exc()


@dp.message_handler(commands=["leg", "–ª–µ–≥–∏"])
async def leg_handler(message: types.Message):
    try:
        if message.reply_to_message:
            user_id = message.reply_to_message.from_user.id
            if await lib.is_user_registered(user_id=user_id):
                leg_message = await lib.leg(user_id)
                await message.reply(text=leg_message, parse_mode='HTML')
            else:
                await message.reply("–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!")
        else:
            user_id = message.from_user.id
            if await lib.is_user_registered(user_id=user_id):
                leg_message = await lib.leg(user_id)
                await message.reply(text=leg_message, parse_mode='HTML')
            else:
                await reg_handler(message)
                await leg_handler(message)
    except:
        traceback.print_exc()
        await bot.send_message(chat_id=1167542251, text=f"Error: {e}")

@dp.message_handler(commands=["epic", "—ç–ø–∏–∫–∏"])
async def epic_handler(message: types.Message):
    try:
        if message.reply_to_message:
            user_id = message.reply_to_message.from_user.id
            if await lib.is_user_registered(user_id=user_id):
                leg_message = await lib.epic(user_id)
                await message.reply(text=leg_message, parse_mode='HTML')
            else:
                await message.reply("–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!")
        else:
            user_id = message.from_user.id
            if await lib.is_user_registered(user_id=user_id):
                leg_message = await lib.epic(user_id)
                await message.reply(text=leg_message, parse_mode='HTML')
            else:
                await reg_handler(message)
                await leg_handler(message)
    except:
        traceback.print_exc()
        await bot.send_message(chat_id=1167542251, text=f"Error: {e}")

@dp.message_handler(commands=["nick", "–Ω–∏–∫"])
async def nick_handler(message: types.Message):
    try:
        user_id = message.from_user.id
        args = message.text.split()[1:]
        user_name = ' '.join(args)
        if await lib.is_user_registered(user_id=user_id):
            if len(user_name) <= 15:
                await lib.name(user_name=user_name, user_id=user_id)
                await message.reply("–ù–∏–∫ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω")
            else:
                await message.reply("–ù–∏–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ—Ä–æ—á–µ 15 —Å–∏–º–≤–æ–ª–æ–≤")
        else:
            await reg_handler(message)
            await nick_handler(message)
    except Exception as e:
        await bot.send_message(chat_id=1167542251, text=f"Error: {e}")


@dp.message_handler(commands=["status", "—Å—Ç–∞—Ç—É—Å"])
async def status_handler(message: types.Message):
    try:
        user_id = message.from_user.id
        args = message.text.split()[1:]
        user_status = ' '.join(args)
        if await lib.is_user_registered(user_id=user_id):
            if len(user_status) <= 50:
                await lib.status(user_status=user_status, user_id=user_id)
                await message.reply("–°—Ç–∞—Ç—É—Å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω")
            else:
                await message.reply("–°—Ç–∞—Ç—É—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ—Ä–æ—á–µ 50 —Å–∏–º–≤–æ–ª–æ–≤")
        else:
            await reg_handler(message)
            await stasus_handler(message)
    except Exception as e:
        await bot.send_message(chat_id=1167542251, text=f"Error: {e}")

@dp.message_handler(commands=["daily", "–µ–∂–µ"])
async def daily_handler(message: types.Message):
    try:
        user_id = message.from_user.id
        if await lib.is_user_registered(user_id=user_id):
            await message.reply(text=await lib.daily(user_id=user_id))
            await acc_handler(message)
        else:
            await reg_handler(message)
            await daily_handler(message)
    except Exception as e:
        await bot.send_message(chat_id=1167542251, text=f"Error: {e}")


@dp.message_handler(commands=["moon", "–ª—É–Ω–∞"])
async def moon_handler(message: types.Message):
    try:
        user_id = message.from_user.id
        moon = message.from_user.is_premium
        if await lib.is_user_registered(user_id=user_id):
            await message.reply(text= await lib.moon(user_id = user_id, moon = moon))
        else:
            await reg_handler(message)
            await moon_handler(message)
    except Exception as e:
        await bot.send_message(chat_id=1167542251, text=f"Error: {e}")

@dp.message_handler(commands=["blessing", "–±–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏–µ"])
async def blessing_handler(message: types.Message):
    try:
        user_id = message.from_user.id
        if await lib.is_user_registered(user_id=user_id):
            await message.reply(text=await lib.blessing(user_id=user_id))
            await acc_handler(message)
        else:
            await reg_handler(message)
            await blessing_handler(message)
    except Exception as e:
        await bot.send_message(chat_id=1167542251, text=f"Error: {e}")


@dp.message_handler(commands=["banner", "–±–∞–Ω–Ω–µ—Ä"])
async def banner_handler(message: types.Message):
    try:
        banner_msg = await lib.banner()
        banner_day = message.date.day
        await lib.examination_banner(banner_day = banner_day)
        with open("banner.jpg", "rb") as file:
            keyboard = types.InlineKeyboardMarkup()
            button1 = types.InlineKeyboardButton(text="–ö—Ä—É—Ç–∫–∞", callback_data="twist")
            keyboard.row(button1)
            await bot.send_photo(chat_id=message.chat.id, photo=file, caption=banner_msg, reply_to_message_id=message.message_id, reply_markup=keyboard)
    except Exception as e:
        await bot.send_message(chat_id=1167542251, text=f"Error: {e}")

@dp.callback_query_handler(lambda callback_query: callback_query.data in ["twist"])
async def twist_callback_handler(callback_query: types.CallbackQuery):
    try:
        user_id = callback_query.from_user.id
        if await lib.is_user_registered(user_id=user_id):
            await bot.answer_callback_query(callback_query.id)
            keyboard = types.InlineKeyboardMarkup()
            button1 = types.InlineKeyboardButton(text="–ö—Ä—É—Ç–∫–∞", callback_data="twist")
            keyboard.row(button1)
            await bot.send_message(chat_id=callback_query.message.chat.id, text=await twist.twist(user_id=user_id), parse_mode="HTML", reply_markup=keyboard)
        else:
            await reg_handler(callback_query.message)
    except Exception as e:
        await bot.send_message(chat_id=1167542251, text=f"Error: {e}")


@dp.message_handler(commands=["twist", "–∫—Ä—É—Ç–∫–∞"])
async def twist_handler(message: types.Message):
    try:
        user_id = message.from_user.id
        if await lib.is_user_registered(user_id=user_id):
            await message.reply(text= await twist.twist(user_id = user_id), parse_mode = "HTML")
            await acc_handler(message)
        else:
            await reg_handler(message)
            await twist_handler(message)
    except Exception as e:
        await bot.send_message(chat_id=1167542251, text=f"Error: {e}")

@dp.message_handler(commands=["bones", "–∫–æ—Å—Ç–∏"])
async def bones_handler(message: types.Message):
    try:
        user_id = message.from_user.id
        bid = message.text.split()[1] if len(message.text.split()) > 1 else None
        if bid is None:
            await message.reply(text="–í–≤–µ–¥–∏ —á–∏—Å–ª–æ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã!")
            return
        try:
            number = int(bid)
        except ValueError:
            await message.reply(text="–í–≤–µ–¥–∏ —á–∏—Å–ª–æ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã!")
            return
        if number < 0:
            await message.reply(text = "–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º!")
            return
        if await lib.is_user_registered(user_id=user_id):
            await message.reply(text=await lib.bones(user_id=user_id, number=number), parse_mode="HTML")
            await acc_handler(message)
        else:
            await reg_handler(message)
            await bones_handler(message)
    except Exception as e:
        await bot.send_message(chat_id=1167542251, text=f"Error: {e}")

@dp.message_handler(commands=["promo", "–ø—Ä–æ–º–æ"])
async def promo_handler(message: types.Message):
    try:
        user_id = message.from_user.id
        args = message.text.split()[1:]
        promo = ' '.join(args)
        if await lib.is_user_registered(user_id=user_id):
            await message.reply(await lib.promo(promo = promo, user_id = user_id))
        else:
            await reg_handler(message)
            await promo_handler(message) 
    except Exception as e:
        await bot.send_message(chat_id=1167542251, text=f"Error: {e}")

@dp.message_handler(commands=["hand", "–ø–µ—Ä–µ–¥–∞—Ç—å"])
async def hand_handler(message: types.Message):
    try:
        user_id = message.from_user.id
        bid = message.text.split()[1] if len(message.text.split()) > 1 else None
        if bid is None:
            await message.reply(text="–í–≤–µ–¥–∏ —á–∏—Å–ª–æ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã!")
            return
        try:
            number = int(bid)
        except ValueError:
            await message.reply(text="–í–≤–µ–¥–∏ —á–∏—Å–ª–æ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã!")
            return
        if number < 0:
            await message.reply(text = "–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º!")
            return
        if message.reply_to_message:
            user_id2 = message.reply_to_message.from_user.id
            if await lib.is_user_registered(user_id=user_id):
                if await lib.is_user_registered(user_id=user_id2):
                    await message.reply(text=await lib.hand(user_id=user_id, number=number, user_id2=user_id2), parse_mode="HTML")
                else:
                    await message.reply(text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!\n–¢—ã –Ω–µ –º–æ–∂–µ—à—å –ø–µ—Ä–µ–¥–∞—Ç—å –ø—Ä–∏–º–æ–≥–µ–º—ã —Ç–æ–º—É, –∫–æ–≥–æ –Ω–µ—Ç)")
            else:
                await reg_handler(message)
                await hand_handler(message)
        else:
            message.reply(text = "–û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ–ª–æ–≤–µ–∫–∞, –∫–æ–º—É —Ö–æ—á–µ—à—å –ø–µ—Ä–µ–¥–∞—Ç—å –ø—Ä–∏–º–æ–≥–µ–º—ã!")
    except Exception as e:
        await bot.send_message(chat_id=1167542251, text=f"Error: {e}")
#23:30 19 –ú–∞—Ä—Ç–∞ - —Ç—ã —Å—Ö–æ–¥–∏—à—å —Å —É–º–∞...



@dp.message_handler(commands=["up", "—É–ª—É—á—à–∏—Ç—å"])
async def up_handler(message: types.Message):
    try:
        user_id = message.from_user.id
        args = message.text.split()[1:]
        text = ''.join(args)
        print(text)
        mod = 0  # —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if await lib.is_user_registered(user_id=user_id):
            if text == "–¥–æ–º":
                mod = 1
            elif text == "–±–∞—Å—Å–µ–π–Ω":  # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–µ–∫—Å—Ç–∞
                mod = 2
            elif text == "–æ–≥—Ä–∞–∂–¥–µ–Ω–∏–µ":
                mod = 3
            elif text == "–æ–±—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ":
                mod = 4
            elif text == "–ø–µ–π–∑–∞–∂":
                mod = 5
            else:
                await message.reply("""–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —É–ª—É—á—à–µ–Ω–∏—è.

–ü—Ä–∏–º–µ—Ä —É–ª—É—á—à–µ–Ω–∏—è
/up –¥–æ–º
/up –æ–±—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
/up –±–∞—Å—Å–µ–π–Ω
/up –æ–≥—Ä–∞–∂–¥–µ–Ω–∏–µ
/up –ø–µ–π–∑–∞–∂""")
                return
            await message.reply(text=await lib.up(user_id=user_id, mod=mod))
        else: 
            await reg_handler(message)
            await up_handler(message)
    except Exception as e:
        traceback.print_exc()

@dp.message_handler(commands=["price", "—Ü–µ–Ω–∞"])
async def price_handler(message: types.Message):
    try:
        user_id = message.from_user.id
        if await lib.is_user_registered(user_id=user_id):
            await message.reply(text = await lib.price(user_id = user_id))
    except Exception as e:
        traceback.print_exc()

@dp.message_handler(commands=["view", "–≤–∏–¥"])
async def view_handler(message: types.Message):
    try:
        user_id = message.from_user.id
        if await lib.is_user_registered(user_id=user_id):
            await message.reply(text = await lib.view(user_id = user_id))
            await acc_handler(message)
        else:
            await reg_handler(message)
            await view_handler(message)
    except Exception as e:
        traceback.print_exc()

@dp.message_handler(commands=["start", "–ø–æ–º–æ—â—å", "help"])
async def view_handler(message: types.Message):
    try:
        await message.reply(text ="""<b>üëã–ü—Ä–∏–≤–µ—Ç!üëã</b>
<b>–î–∞–Ω–Ω—ã–π –±–æ—Ç - —Å–∏–º—É–ª—è—Ç–æ—Ä –∫—Ä—É—Ç–æ–∫ –∏–∑ Genshin.üßÆ</b>
<b>–ß—Ç–æ –±—ã –Ω–∞—á–∞—Ç—å –∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è - –Ω–∞–ø–∏—à–∏ /—Ä–µ–≥</b>
<b>–ê –¥–∞–ª—å—à–µ —Ä–∞–∑–±–µ—Ä–µ—à—å—Å—è.üòé</b>
<b>–í–æ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–º–∞–Ω–¥:</b>
<b>/–∞–∫–∫ /acc</b>
<b>–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç</b>
<b>/—ç–ø–∏–∫–∏ /epic</b>
<b>–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∞—à–∏—Ö —ç–ø–∏–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π</b>
<b>/–ª–µ–≥–∏ /leg</b>
<b>–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∞—à–∏—Ö –ª–µ–≥ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π</b>
<b>/–∫—Ä—É—Ç–∫–∞ /twist</b>
<b>–∫—Ä—É—Ç–∫–∞ (–±–∞–∑–∞)</b>
<b>/–≤–∏–¥ /view</b>
<b>—Å–º–µ–Ω–∞ –≤–∏–¥–∞ –∞–∫–∫–∞—É–Ω—Ç–∞</b>
<b>/–µ–∂–µ /daily</b>
<b>–µ–∂–µ—á–∞—Å–æ–≤—ã–µ –ø—Ä–∏–º–æ–≥–µ–º—ã</b>
<b>/–±–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏–µ /blessing</b>
<b>–ø—Ä–∏–º–æ–≥–µ–º—ã –∑–∞ –ø—Ä–æ–∫–∞—á–∫—É —á–∞–π–Ω–∏–∫–∞</b>
<b>/–ª—É–Ω–∞ /moon</b>
<b>–ø—Ä–∏–º–æ–≥–µ–º—ã –∑–∞ —Ç–≥ –ø—Ä–µ–º–∏—É–º</b>
<b>/–ø–µ—Ä–µ–¥–∞—Ç—å /hand</b>
<b>–ø–µ—Ä–µ–¥–∞—á–∞ –ø—Ä–∏–º–æ–≥–µ–º–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä /hand 1000</b>
<b>/–∫–æ—Å—Ç–∏ /bones</b>
<b>–∏–≥—Ä–∞ 50/50, –Ω–∞–ø—Ä–∏–º–µ—Ä /bones 300</b>
<b>/–ø—Ä–æ–º–æ /promo</b>
<b>–≤–≤–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥, –Ω–∞–ø—Ä–∏–º–µ—Ä /promo qwerty</b>
<b>–ü—Ä–æ–º–æ–∫–æ–¥—ã –ø—É–±–ª–∏–∫—É—é—Ç—Å—è –∑–¥–µ—Å—å: https://t.me/bannersim</b>
<b>/–±–∞–Ω–Ω–µ—Ä /banner</b>
<b>–±–∞–Ω–Ω–µ—Ä –Ω–∞ —Å–µ–≥–æ–¥–Ω—è</b>
<b>/—á–∞–π–Ω–∏–∫ /kettle</b>
<b>—Ç–≤–æ–π —á–∞–π–Ω–∏–∫</b>
<b>/—Ä–∞–Ω–≥ /rank</b>
<b>–ø–æ–≤—ã—à–µ–Ω–∏–µ –≤–∞—à–µ–≥–æ —Ä–∞–Ω–≥–∞, –µ—Å–ª–∏ –æ–ø—ã—Ç–∞ >1000</b>
<b>/—Ü–µ–Ω–∞ price</b>
<b>—Ü–µ–Ω–∞ –ø—Ä–æ–∫–∞—á–∫–∏ —á–∞–π–Ω–∏–∫</b>
<b>/—É–ª—É—á—à–∏—Ç—å /up</b>
<b>–ø—Ä–æ–∫–∞—á–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ —á–∞–π–Ω–∏–∫–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä /up –¥–æ–º</b>
<b>/–Ω–∏–∫ /nick, /—Å—Ç–∞—Ç—É—Å /status</b>
<b>–ø—Ä–æ—Å—Ç–æ —Å–º–µ–Ω–∞ –Ω–∏–∫, —Å—Ç–∞—Ç—É—Å–∞ /—Å—Ç–∞—Ç—É—Å "—Å–∞–º —Å—Ç–∞—Ç—É—Å'</b>"""
, parse_mode="HTML")
    except Exception as e:
        traceback.print_exc()

if __name__ == '__main__':
    asyncio.get_event_loop().run_until_complete(executor.start_polling(dp))

